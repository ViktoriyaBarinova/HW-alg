import java.util.Arrays;
import java.util.Random;

public class Main {

    public static void main(String[] args) {
        int[] array1 = generateRandomArray(1000);
        int[] array2 = array1.clone();
        int[] array3 = array1.clone();

        long start, end;

        // Arrays.sort()
        start = System.nanoTime();
        Arrays.sort(array1);
        end = System.nanoTime();
        System.out.println("Arrays.sort(): " + (end - start) + " нс");

        // Bubble sort
        start = System.nanoTime();
        bubbleSort(array2);
        end = System.nanoTime();
        System.out.println("Пузырьком: " + (end - start) + " нс");

        // Quick sort
        start = System.nanoTime();
        quickSort(array3, 0, array3.length - 1);
        end = System.nanoTime();
        System.out.println("Быстрая сортировка: " + (end - start) + " нс");
    }

    private static int[] generateRandomArray(int size) {
        int[] array = new int[size];
        Random random = new Random();
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt();
        }
        return array;
    }

    private static void bubbleSort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    private static void quickSort(int[] array, int left, int right) {
        if (left < right) {
            int pivotIndex = partition(array, left, right);
            quickSort(array, left, pivotIndex - 1);
            quickSort(array, pivotIndex + 1, right);
        }
    }

    private static int partition(int[] array, int left, int right) {
        int pivot = array[right];
        int i = left - 1;
        for (int j = left; j < right; j++) {
            if (array[j] <= pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
        int temp = array[i + 1];
        array[i + 1] = array[right];
        array[right] = temp;
        return i + 1;
    }
}
